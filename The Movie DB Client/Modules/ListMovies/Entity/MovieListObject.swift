//
// MovieListObject.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct MovieListObject: Codable {
    
    
    public var posterPath: String?
    
    public var adult: Bool?
    
    public var overview: String?
    
    public var releaseDate: String?
    
    public var genreIds: [Int]?
    
    public var _id: Int?
    
    public var originalTitle: String?
    
    public var originalLanguage: String?
    
    public var title: String?
    
    public var backdropPath: String?
    
    public var popularity: Decimal?
    
    public var voteCount: Int?
    
    public var video: Bool?
    
    public var voteAverage: Decimal?
    
    public init(posterPath: String?, adult: Bool?, overview: String?, releaseDate: String?, genreIds: [Int]?, _id: Int?, originalTitle: String?, originalLanguage: String?, title: String?, backdropPath: String?, popularity: Decimal?, voteCount: Int?, video: Bool?, voteAverage: Decimal?) {
        self.posterPath = posterPath
        self.adult = adult
        self.overview = overview
        self.releaseDate = releaseDate
        self.genreIds = genreIds
        self._id = _id
        self.originalTitle = originalTitle
        self.originalLanguage = originalLanguage
        self.title = title
        self.backdropPath = backdropPath
        self.popularity = popularity
        self.voteCount = voteCount
        self.video = video
        self.voteAverage = voteAverage
    }
    public enum CodingKeys: String, CodingKey { 
        case posterPath = "poster_path"
        case adult
        case overview
        case releaseDate = "release_date"
        case genreIds = "genre_ids"
        case _id = "id"
        case originalTitle = "original_title"
        case originalLanguage = "original_language"
        case title
        case backdropPath = "backdrop_path"
        case popularity
        case voteCount = "vote_count"
        case video
        case voteAverage = "vote_average"
    }
    
    func decodeReleaseDate() -> Date {
        return MovieListObject.decodeReleaseDate(date: releaseDate)
    }
    
    func decodePosterPath() -> URL {
        return MovieListObject.decodePosterPath(path: posterPath)
    }
    
    public static func decodeReleaseDate(date: String?) -> Date {
        guard let releaseDate = date else {
            return Date()
        }
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        return dateFormatter.date(from: releaseDate) ?? Date()
    }
    
    public static func decodePosterPath(path: String?) -> URL {
        guard let posterPath = path else {
            return URL(string: "https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png")!
        }
        guard let url = URL(string: "https://image.tmdb.org/t/p/w500\(posterPath)") else {
            return URL(string: "https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png")!
        }
        return url
    }
    
}
